{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# FIRST BY CREATING TOY DATA SETS \n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import seaborn as sns \n",
    "from matplotlib import pyplot as plt \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#note that we use cofficients less that  1 to overcome overfitting  more discuss on below \n",
    "x_1  = np.linspace(0 , 3, num = 30 )\n",
    "x_2 = np.linspace(3 , 5 , num = 20 )\n",
    "\n",
    "y = 0.23 * x_1**2 + 0.3*x_1 - 0.6\n",
    "#lets create 50 rows of data sets \n",
    "y = np.append(y , [0.23 * x_2**2 + 0.3 * x_2 -  0.6 ])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.6       , -0.56650416, -0.52808561, -0.48474435, -0.43648038,\n",
       "       -0.3832937 , -0.3251843 , -0.2621522 , -0.19419738, -0.12131986,\n",
       "       -0.04351962,  0.03920333,  0.12684899,  0.21941736,  0.31690844,\n",
       "        0.41932224,  0.52665874,  0.63891795,  0.75609988,  0.87820452,\n",
       "        1.00523187,  1.13718193,  1.2740547 ,  1.41585018,  1.56256837,\n",
       "        1.71420927,  1.87077289,  2.03225922,  2.19866825,  2.37      ,\n",
       "        2.37      ,  2.54939058,  2.73387812,  2.9234626 ,  3.11814404,\n",
       "        3.31792244,  3.52279778,  3.73277008,  3.94783934,  4.16800554,\n",
       "        4.3932687 ,  4.62362881,  4.85908587,  5.09963989,  5.34529086,\n",
       "        5.59603878,  5.85188366,  6.11282548,  6.37886427,  6.65      ])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#now creating sigmoid function \n",
    "def sigmoid(z): \n",
    "    return 1  /  (1 + np.exp(-z))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# are are just putting values on 0 - 1 scale \n",
    "y_new = sigmoid(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def make_classfication(x):\n",
    "    return ( x > 0.5).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target = make_classfication(y_new)\n",
    "target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#snippet above \n",
    "(y  > 0.5).astype(int) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.        , 0.10344828, 0.20689655, 0.31034483, 0.4137931 ,\n",
       "       0.51724138, 0.62068966, 0.72413793, 0.82758621, 0.93103448,\n",
       "       1.03448276, 1.13793103, 1.24137931, 1.34482759, 1.44827586,\n",
       "       1.55172414, 1.65517241, 1.75862069, 1.86206897, 1.96551724,\n",
       "       2.06896552, 2.17241379, 2.27586207, 2.37931034, 2.48275862,\n",
       "       2.5862069 , 2.68965517, 2.79310345, 2.89655172, 3.        ,\n",
       "       3.        , 3.10526316, 3.21052632, 3.31578947, 3.42105263,\n",
       "       3.52631579, 3.63157895, 3.73684211, 3.84210526, 3.94736842,\n",
       "       4.05263158, 4.15789474, 4.26315789, 4.36842105, 4.47368421,\n",
       "       4.57894737, 4.68421053, 4.78947368, 4.89473684, 5.        ])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#concatinating into featues \n",
    "features = np.concatenate((x_1 , x_2 ) , axis = 0 )\n",
    "features "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0   1\n",
       "0  5  58\n",
       "1  5   8"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x  = [4 , 5 ]\n",
    "y = [5 , 8 ]\n",
    "x = np.array( [ 5 , 58 ])\n",
    "y = np.array([5 , 8 ])\n",
    "pd.DataFrame((x , y ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#i don't know why it was giving me 2 * 50 so i transpose it \n",
    "df   =pd.DataFrame([features , target ]).T\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['target ']  = df.iloc[: , 0 ]\n",
    "df['features'] = df.iloc[: , 1 ].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#labelling columsn \n",
    "df = df.drop([0 , 1 ]  , axis = 1  )\n",
    "#okey i am messsing up with just cretiing data frams lol\n",
    "# i will update with more usefull code later hai \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "      <th>features</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.103448</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.206897</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.310345</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.413793</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    target   features\n",
       "0  0.000000         0\n",
       "1  0.103448         0\n",
       "2  0.206897         0\n",
       "3  0.310345         0\n",
       "4  0.413793         0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier \n",
    "from sklearn.model_selection import train_test_split as tts \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = DecisionTreeClassifier()\n",
    "X_train , X_test , ytrain , ytest = tts(features.reshape(-1  , 1 ) , target.reshape(-1 , 1 ), test_size =0.1 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2176ed69f10>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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YIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAAps4oRurq6pSVlaXk5GR5vV61tLSccn1NTY2uvPJKnX/++fJ4PFq6dKmOHTt2RgMDAID4EnGMNDQ0qKKiQlVVVWpra9OsWbNUWFio7u7uYddv3rxZy5cvV1VVld5991099dRTamho0E9/+tOzHh4AAIx/EcfI448/rnvvvVdlZWWaMWOG6uvrdcEFF+jpp58edv1rr72ma6+9VrfffruysrJ00003acGCBad9NgUAAEwMEcXIwMCAWltbVVBQcGKDhAQVFBSoubl52HO++c1vqrW1NRwfH374obZv365bb711xOv09/crEAgMuQEAgPg0KZLFPT09GhwclNvtHnLc7XZr7969w55z++23q6enR9ddd51CoZD++c9/6r777jvlyzTV1dVas2ZNJKMBAIBxasw/TbNz50498sgjeuKJJ9TW1qbf//732rZtmx566KERz6msrJTf7w/fOjo6xnpMAABgJKJnRtLS0pSYmKiurq4hx7u6upSRkTHsOStXrtSdd96pe+65R5L0ta99TX19ffrxj3+sBx98UAkJJ/eQ0+mU0+mMZDQAADBORfTMSFJSknJzc9XU1BQ+FgwG1dTUpPz8/GHP+fTTT08KjsTERElSKBSKdF4AABBnInpmRJIqKipUWlqq2bNnKy8vTzU1Nerr61NZWZkkqaSkRFOnTlV1dbUkqaioSI8//ri+/vWvy+v16v3339fKlStVVFQUjhIAADBxRRwjxcXFOnz4sFatWiWfz6ecnBw1NjaG39R68ODBIc+ErFixQg6HQytWrNDHH3+sSy65REVFRfr5z38evZ8CAACMW47QOHitJBAIyOVyye/3KzU11XocAAAwCqN9/ObPpgEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYOqMYqSurk5ZWVlKTk6W1+tVS0vLKdd/8sknKi8vV2ZmppxOp6644gpt3779jAYGAADxZVKkJzQ0NKiiokL19fXyer2qqalRYWGh9u3bp/T09JPWDwwM6MYbb1R6erqef/55TZ06VR999JEuuuiiaMwPAADGOUcoFApFcoLX69WcOXNUW1srSQoGg/J4PFq0aJGWL19+0vr6+nqtX79ee/fu1XnnnXdGQwYCAblcLvn9fqWmpp7RHgAAILZG+/gd0cs0AwMDam1tVUFBwYkNEhJUUFCg5ubmYc/54x//qPz8fJWXl8vtdis7O1uPPPKIBgcHR7xOf3+/AoHAkBsAAIhPEcVIT0+PBgcH5Xa7hxx3u93y+XzDnvPhhx/q+eef1+DgoLZv366VK1fqscce08MPPzzidaqrq+VyucI3j8cTyZgAAGAcGfNP0wSDQaWnp+s3v/mNcnNzVVxcrAcffFD19fUjnlNZWSm/3x++dXR0jPWYAADASERvYE1LS1NiYqK6urqGHO/q6lJGRsaw52RmZuq8885TYmJi+NhXv/pV+Xw+DQwMKCkp6aRznE6nnE5nJKMBAIBxKqJnRpKSkpSbm6umpqbwsWAwqKamJuXn5w97zrXXXqv3339fwWAwfOy9995TZmbmsCECAAAmlohfpqmoqNDGjRv1zDPP6N1339XChQvV19ensrIySVJJSYkqKyvD6xcuXKgjR45o8eLFeu+997Rt2zY98sgjKi8vj95PAQAAxq2Iv2ekuLhYhw8f1qpVq+Tz+ZSTk6PGxsbwm1oPHjyohIQTjePxePTyyy9r6dKlmjlzpqZOnarFixdr2bJl0fspAADAuBXx94xY4HtGAAAYf8bke0YAAACijRgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmzihG6urqlJWVpeTkZHm9XrW0tIzqvC1btsjhcGj+/PlnclkAABCHIo6RhoYGVVRUqKqqSm1tbZo1a5YKCwvV3d19yvMOHDigBx54QHPnzj3jYQEAQPyJOEYef/xx3XvvvSorK9OMGTNUX1+vCy64QE8//fSI5wwODuqOO+7QmjVrdPnll5/VwAAAIL5EFCMDAwNqbW1VQUHBiQ0SElRQUKDm5uYRz/vZz36m9PR03X333aO6Tn9/vwKBwJAbAACITxHFSE9PjwYHB+V2u4ccd7vd8vl8w57z6quv6qmnntLGjRtHfZ3q6mq5XK7wzePxRDImAAAYR8b00zS9vb268847tXHjRqWlpY36vMrKSvn9/vCto6NjDKcEAACWJkWyOC0tTYmJierq6hpyvKurSxkZGSet/+CDD3TgwAEVFRWFjwWDweMXnjRJ+/bt05e+9KWTznM6nXI6nZGMBgAAxqmInhlJSkpSbm6umpqawseCwaCampqUn59/0vqrrrpKb731ltrb28O32267TfPmzVN7ezsvvwAAgMieGZGkiooKlZaWavbs2crLy1NNTY36+vpUVlYmSSopKdHUqVNVXV2t5ORkZWdnDzn/oosukqSTjgMAgIkp4hgpLi7W4cOHtWrVKvl8PuXk5KixsTH8ptaDBw8qIYEvdgUAAKPjCIVCIeshTicQCMjlcsnv9ys1NdV6HAAAMAqjffzmKQwAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaIEQAAYIoYAQAApogRAABgihgBAACmiBEAAGCKGAEAAKaI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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.iloc[: , 0 ] , df.iloc[: ,1 ] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#note that this data sets can be easily predictable "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = DecisionTreeClassifier()\n",
    "x = df.iloc[: , 0].values #convertng into numpy array \n",
    "y = df.iloc[: , 1 ].values #converting into numpy array "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2176ef7ba10>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x  , y  , c = y  )\n",
    "#color chi ayo but data sets banako ma upset nai baye \n",
    "#data sets is not that much usefull "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(x.reshape(-1 , 1 ) , y.reshape(-1 , 1 ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "querry_pnt = 0.10344828 \n",
    "clf.predict(np.array(querry_pnt).reshape(-1 , 1 ))\n",
    "#correct gussing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.10344827586206896, 0)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[1] , y[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = clf.predict(x.reshape(-1 , 1 ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[11,  0],\n",
       "       [ 0, 39]], dtype=int64)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now lets calculate its predicton \n",
    "from sklearn.metrics import confusion_matrix \n",
    "from sklearn.metrics import accuracy_score \n",
    "confusion_matrix(y , y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y , y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "d:\\software\\python\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:700: UserWarning: The least populated class in y has only 11 members, which is less than n_splits=30.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9833333333333333"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "cross_val_score(clf , x.reshape(-1 , 1 )  , y.reshape(-1 , 1 ) , cv = 30).mean() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# since this data is easy to predict so the outcome is like that "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[11,  0],\n",
       "       [ 0, 39]], dtype=int64)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y , y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score \n",
    "#balacene score \n",
    "f1_score(y_pred.reshape(-1 , 1 ), y.reshape(-1 , 1 ) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import recall_score \n",
    "#ablility to predict truth \n",
    "recall_score(y_pred.reshape(-1 , 1 ), y.reshape(-1 , 1 ))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_score\n",
    "#The precision is intuitively the ability of the classifier not to \n",
    "# label as positive a sample that is negative\n",
    "\n",
    "precision_score(y_pred.reshape(-1 , 1 ), y.reshape(-1 , 1 ))\n",
    "\n",
    "\n",
    "\n",
    "#cool toys == true values  that are needed \n",
    "\n",
    "#greate pricison score \n",
    "# means you're really good at picking out the cool toys and you hardly ever  \n",
    "# give your friend a toy that isn't cool. But if your precision is low, \n",
    "# it means you make a lot of \n",
    "# mistakes and your friend might end up with a toy they don't like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
